import math
import math

def Area_Cicunferencia(raio=1, Prec=2):
    """Fun√ß√£o que c√°lcula a √°rea de um c√≠rculo recebendo como par√¢metros de entrada o valor do raio (metros) e da precis√£o de pi
        Dependendo da precis√£o considerada o resultado ser√° diferente"""

    # decimal.getcontext().prec=Prec#define a precis√£o do resultado
    pi = float(str(math.pi)[:Prec])
    area = pi*raio**2
    print(f"Considerando pi = {pi} -> √Årea= {area}")
    return (area)


def precisao_maquina():
    """Fun√ß√£o que calcula a precis√£o da m√°quina  com reer√™ncia de precis√£o igual a 1"""
    A = 1
    S = 2

    while (S > 1):
        A = A/2
        S = 1+A
    prec = 2*A

    return prec

def somatorio(X=1.0, K=1, N=1):
    """Fun√ß√£o pra calcular o somat√≥rio de X K-N vezes"""
    S = 0.0
    for i in range(K, N+1):
        S += X
    return (S)


def exercicio01(X=1.0, K=1, N=1):
    """1. Escreva um programa que obtenha os seguintes resultados:
        S = 10000 ‚àí **Somat√≥rio de X para valores inteiros de 1 at√© n**"""
    S = 0.0
    for i in range(K, N+1):
        S += X

    result = 10000-S  # aqui representa o valor esperado menos o valor aproximado calculado no for -> ou seja, o erro absoluto do somat√≥rio em si

    return (result)


def ErroAbsoluto(exato, aproximado):
    """C√°lculo do erro absoluto = m√≥dulo da diferen√ßa entre o valor exato e o valor aproximado"""
    return math.fabs(exato-aproximado)


def ErroRelativo(exato, aproximado):
    """Fun√ß√£o que recebe o valor exato e o valor aproximado de um n√∫mero e retorna seu erro relativo
        Erro relativo -> Erro absoluto dividido pelo valor exato"""
    try:
        E_relativo = math.fabs(exato-aproximado)/math.fabs(exato)
        return E_relativo

    except ZeroDivisionError:
        return 'divisao imposs√≠vel -> Sem Erro Relativo'


def precisao_maquina_ref():
    """Fun√ß√£o que calcula a precis√£o da m√°quina, o n√∫mero positivo em aritm√©tica de ponto flutuante ùúÄ, tal que 1 + ùúÄ >1. recebendo como par√¢metro o n√∫mero de refer√™ncia da precis√£o"""
    ref = int(input("Insira o valor de refer√™ncia da precis√£o: "))
   # passo 1
    A = 1
    S = ref+A
    # passo 2
    while (S > ref):
        A = A/2
        S = ref+A
    prec = 2*A  # passo 3
    return prec
    # print(f"Precis√£o da m√°quina: {prec}")


def SerieDeTaylor(X=1, N=1):
    """Fun√ß√£o que calcula o valor da s√©rie de taylor recebendo X e N como par√¢metro
    S√©rie de taylor: e^x = somat√≥rio de X**k/k! N vezes"""
    if X < 0:
        y = -X
        return 1/SerieDeTaylor(y,N)
    result = 0.0
    for k in range(0, N+1):
        SAux = X**k/math.factorial(k)
        # somat√≥rio
        result += SAux
    return (result)


def ExercicioSerieTaylor():
    """Exerc√≠cio pra receber os par√¢metros X e N da s√©rie de taylor do usu√°rio e mostrar o resultado"""

    print("{:#^60}".format("\nS√©rie de Taylor\n"))
    X = int(input("Insira o valor de X da s√©rie de taylor: "))
    N = int(input("Insira o valor de N da s√©rie de taylor: "))
    print(
        f"Para X = {X} e N = {N}, o c√°lculo da s√©rie de taylor √© {SerieDeTaylor(X,N)}")


def SerieDeTaylor_NoOverflow(X=1, N=1):
    """Fun√ß√£o que calcula a s√©rie de Taylor recebendo X e N como par√¢metros e evitando a ocorr√™ncia de Overflow"""

    if X < 0:
        y = -X
        return 1/SerieDeTaylor_NoOverflow(y)
    result = 0.0
    try:
        for k in range(0, N+1):
            Xk = X**k
            K_factor = math.factorial(k)
            # print(Xk)
            # print(K_factor)
            SAux = Xk/K_factor
            # somat√≥rio
            result += SAux
        return (result)
    except:
        print(
            f"\n \033[31mN√∫mero m√°ximo de intera√ß√µes (valor de N m√°ximo que a m√°quina foi capaz de calcular) = {k}\033[m")
        print(
            f" M√°ximo Valor Aproximado para X = {X} e N = {k-2} -> ", SerieDeTaylor_NoOverflow(X, k-2))
        
def ExercicioSerieTaylor_NoOverflow():
    """Exerc√≠cio pra receber os par√¢metros X e N da s√©rie de taylor do usu√°rio e mostrar o resultado"""
    print("{:#^60}".format("S√©rie de Taylor - Sem Overflow"))
    X = int(input("Insira o valor de X da s√©rie de taylor: "))
    N = int(input("Insira o valor de N da s√©rie de taylor: "))
    print(f"Para X = {X} e N = {N}, o c√°lculo da s√©rie de taylor √© {SerieDeTaylor_NoOverflow(X,N)}")
    print("#"*75,"\n")
    
def SerieDeTaylorAprox(X,N):
    "Fun√ß√£o que calcula a s√©rie de taylor. Em caso de overflow o m√°ximo valor que a m√°quina conseguiu armazenar √© retornado"

    if X < 0:
        y = -X
        return 1/SerieDeTaylor(y)
    result = 0.0
    try :
        for k in range(0, N+1):
            SAux = X**k/math.factorial(k)
            # somat√≥rio
            result += SAux
        return result
    except:
        print('\n\033[31m ############ OVERFLOW ##################### \033[m \n')
        print(f"N√∫mero m√°ximo de itera√ß√µes (valor de N m√°ximo que a m√°quina foi capaz de calcular) = {k}")
        aprox = SerieDeTaylor(X, k-2) #valor aproximado
        print(f" M√°ximo Valor Aproximado para X = {X} e N = {k-2} -> ", aprox)
        return aprox