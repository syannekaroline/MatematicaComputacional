
import pandas as pd, numpy as np
import matplotlib.pyplot as plt

def AvaliaSinalFunc(coeficientes,ValoresX=[-1,1],IsIntervalo = True):
    """Fun√ß√£o que avalia os sinais de uma fun√ß√£o em valores de x ou em dado intervalo
    Par√¢metros:
    coeficientes: coeficientes da fun√ß√£o
    valoresX: Intervalo ou valores de x que dever√£o ser considerado na an√°lise da fun√ß√£o. Por padr√£o considera o intervalo de -1 at√© 1.
    IsIntervalo: por padr√£o recebe True. Se false siginifica que o par√¢metro intervalo se refere aos valores de X que dever√£o ser considerados na an√°lise."""
    #contruir a fun√ß√£o
    func = np.poly1d(coeficientes)
    analise={
        'x': ["f(x)"," sinal"]
    }
    desafio = {'x': ["f(x)"," sinal"]}
    if IsIntervalo :
        aux=list([func(ValoresX[0]), "+" if func(ValoresX[0]) > 0 else "-" ])# vari√°vel auxiliar pro desafio -> verificar apenas as trocas de sinal
        desafio[f'{ValoresX[0]}']=aux

        for x in range(ValoresX[0],ValoresX[1]):
            analise[f'{x}'] = list([func(x), "+" if func(x) > 0 else "-" ])
            
            if analise[f'{x}'][1] != aux[1]: # se tiver mudan√ßa de sinal
                #guardar o dicion√°rio do desafio
                desafio[f'{x}'] = analise[f'{x}']
                aux=analise[f'{x}']

    else: 
        for x in ValoresX:
            analise[f'{x}'] = list([func(x), "+" if func(x) > 0 else "-" ])

            if analise[f'{x}'][1] != aux[1]: # se tiver mudan√ßa de sinal
                #guardar o dicion√°rio do desafio
                desafio[f'{x}'] = analise[f'{x}']
                aux=analise[f'{x}']
    
    tabelaAnalise=pd.DataFrame(analise)
    tabelaDesafio = pd.DataFrame(desafio)
    ##retorno ao usu√°rio
    print("{:#^60}".format("An√°lise do sinal da fun√ß√£o"))
    print(f"\n f(x) = \n{func}\n")

    print("{:#^60}".format("Tabela de an√°lise"))
    print(tabelaAnalise)
    print("{:#^60}".format("Tabela do desafio"))

    print(tabelaDesafio)

def ExercicioAvaliaSinalFunc():
    coeficientes=list(map(int,input("Insira valoresdos coeficientes da fun√ß√£o separados por um espa√ßo: ").split()))
    IsIntervalo = True if input("Insira 1 pra escolher a op√ß√£o de inserir um intervalo ou 2 pra inserir os valores de x pra an√°lise da fun√ß√£o: ") == "1" else False
    ValoresX =( list(map(int,input("Insira valores do intervalo da fun√ß√£o separados por um espa√ßo: ").split())) 
                if IsIntervalo 
                else list(map(int,input("Insira valores de x separados por um espa√ßo: ").split())) )
    AvaliaSinalFunc(coeficientes,ValoresX,IsIntervalo)



def ExercicioAvaliaGrafico():
    """exercicio de Gerar gr√°ficos pra fun√ß√µes polinomiais"""

    coeficientes=list(map(int,input("Insira valoresdos coeficientes da fun√ß√£o separados por um espa√ßo: ").split()))
    valoresX =list(map(int,input("Insira valores do intervalo da fun√ß√£o separados por um espa√ßo: ").split()))

    print("########### Fun√ß√£o f(x) ###########")
    GeraGraficoFx(coeficientes,valoresX)

def GeraGraficoFx(coeficientes,ValoresX) :
  """Gera gr√°ficos pra fun√ß√µes polinomiais"""
  # Definindo conjunto de 1000 valores de x entre 0 e 3
  x = np.linspace(ValoresX[0],ValoresX[1],1000)
  # definindo vetor y nas mesmas dimens√µes que o vetor x
  y = np.array(x.shape)
  #definindo y, ou seja, aplicando x na fun√ß√£o f(x) = x^3 - 2x^2 + 7
  y = np.poly1d(coeficientes)

  #tamanho da figura
  plt.figure(figsize = (10,4))
  #define X, Y, tipo de marcador(nenhum nesse caso) e cor
  plt.plot(x,y(x), marker = '', color = 'green')     
  #define t√≠tulo
  plt.title(f'Gr√°fico \n{y}')
  #define nome a mostrar no eixo x
  plt.xlabel('Eixo x')
  #define nome a mostrar no eixo y
  plt.ylabel('Eixo y')
  #faz a plotagem

  """Gera gr√°ficos pra fun√ß√µes polinomiais equivalentes"""
  # Definindo conjunto de 1000 valores de x entre 0 e 3
  x = np.linspace(ValoresX[0],ValoresX[1],1000)
  # definindo vetor y nas mesmas dimens√µes que o vetor x
  y = np.array(x.shape) 
  coeficientes2=[-coeficientes[0]]
  for i in range(1,len(coeficientes)): coeficientes2.append(0)

  f1 = np.poly1d(coeficientes2)
  f2 = np.poly1d(coeficientes[1:])

  #tamanho da figura
  plt.figure(figsize = (10,4))
  #define X, Y, tipo de marcador(nenhum nesse caso) e cor
  plt.plot(x,f1(x), label =f'\n{f1}' ,marker = '', color = 'green')
  plt.plot(x,f2(x),label =f"\n{f2}" , marker = '', color = 'red')     
  #define t√≠tulo
  plt.title(f'Gr√°ficos Equivalentes: \n h(x) = {f1}  \n g(x) ={f2} ')
  #define nome a mostrar no eixo x
  plt.xlabel('Eixo x')
  #define nome a mostrar no eixo y
  plt.ylabel('Eixo y')
  #faz a plotagem
  
  plt.legend()
  plt.show()

def GeraGraficos(f,g,h,legendas) :
  """Gera gr√°fico de uma fun√ß√£o e de suas equivalentes que recebe como par√¢metro"""
  plt.style.use("seaborn")
  x = np.linspace(0,4,1000)
  y = np.array(x.shape)

  #inserindo fu√ß√£o principal - GR√ÅFICO 1
  

  #configurando gr√°fico
  plt.figure(figsize = (10,4))
  plt.subplot(2, 1, 1)
  plt.title(f'Gr√°fico \nf(x)')
  plt.xlabel('Eixo x')
  plt.ylabel('Eixo y')

  #faz a plotagem
  plt.plot(x,f(x),label =legendas[0], marker = '', color = 'green') 
  plt.legend()    

  ########## GR√ÅFICO 2

  x = np.linspace(0,4,10)
  # definindo vetor y nas mesmas dimens√µes que o vetor x
  y = np.array(x.shape)
  #INSERINDO FUN√á√ïES EQUIVALENTES
  plt.subplot(2, 1, 1)

  #CONFIGURANDO GR√ÅFICO
  plt.figure(figsize = (10,4))
  plt.title(f'Gr√°ficos Equivalentes: \n h(x) e g(x) ')
  plt.xlabel('Eixo x')
  plt.ylabel('Eixo y')

  #faz a plotagem
  plt.plot(x,h(x), label =legendas[1],marker = '', color = 'green')
  plt.plot(x,g(x),label =legendas[2], marker = '', color = 'red')     
  plt.legend()
  plt.show()

############################################# Resolu√ß√£o ###############################################################################################
#GeraGraficos(lambda x : np.sqrt(x) - 5*np.exp(-x),lambda x: np.sqrt(x),lambda x:  5*np.exp(-x),["np.sqrt(x) - 5*np.exp(-x)","np.sqrt(x)","5*np.exp(-x)"])


def bisseccao(funcao,intervalo,erro):
  """Fun√ß√£o que realiza o m√©todo da bissec√ß√£o pra achar a raiz real de uma fun√ß√£o.
  Par√¢metros:
  fun√ß√£o : fun√ß√£o pro c√°lculo ex: fun√ß√£o = lambda x:x**3-9*x+3 
  intevalo: lista contendo o intervalo considerado da fun√ß√£o. ex: [-1,1]
  erro: crit√©rio de parada pra precis√£o requerida ex:  0.000000001 """

  ai = intervalo[0] 
  bi = intervalo[1]
  i = 0 # vari√°vel q armazena o n√∫mero de itera√ß√µes realizadas ( bissec√ß√µes realizadas)
  # verificar se o m√©todo se aplica a fun√ß√£o
  if funcao(ai)*funcao(bi)< 0:

    while abs(bi-ai) > erro: # testa o crit√©rio de parada: enquanto a diferen√ßa entre intervalo for maior que o erro -> enquanto f(pi) > precis√£o
      #calcula o ponto m√©dio
      pi = (ai + bi)/2
      #print("a{}: {};  b{}: {};  p{}: {};".format(i,ai,i,bi,i,pi)) # Mostre todos os passos do algoritmo com os valores de ùëéùëñ, ùëèùëñ e ùëùi

      # realiza a bissec√ß√£o no intervalo verificando o sinal das extremidades na fun√ß√£o
      if funcao(ai)*funcao(pi)<0: # significa que a ra√≠z pertence a esse intervalo -> est√° mais a esquerda de bi
          bi = pi
      else: # a raiz est√° mais a direita de ai -> diminui o intervalo fazendo ai receber o ponto m√©dio calculado
          ai = pi
      i+=1
    return (pi,funcao(pi),i)
  else:
    print("N√£o existe ra√≠z real neste intervalo!")
#print(bisseccao(lambda x: 31 - ((9.8*x)/13)* (1. - math.exp(-6.0*(13.0/x))), [52, 55], 10**-4))
